[project]
name = "parrator"
version = "0.2.0"
description = "Speech to text using Parakeet ONNX models"
authors = [
    {name = "NullSense matas234@gmail.com"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.11,<3.14"
dependencies = [
    "onnx-asr (>=0.6.0,<0.7.0)",
    "onnxruntime-directml (>=1.22.0,<2.0.0)",
    "soundfile (>=0.13.1,<0.14.0)",
    "huggingface-hub (>=0.31.4,<0.32.0)",
    "sounddevice (>=0.5.2,<0.6.0)",
    "numpy (>=2.2.6,<3.0.0)",
    "pyperclip (>=1.9.0,<2.0.0)",
    "keyboard (>=0.13.5,<0.14.0)",
    "webrtcvad-wheels (>=2.0.14,<3.0.0)",
    "loguru (>=0.7.3,<0.8.0)",
    "pyautogui (>=0.9.54,<1.0.0)",
    "pystray (>=0.19.5,<0.20.0)",
    "pynput (>=1.8.1,<2.0.0)",
    "requests (>=2.31.0,<3.0.0)",
]

[tool.poetry.group.textrefinement]
optional = true

[tool.poetry.group.textrefinement.dependencies]
transformers = {version = ">=4.43.2,<5.0.0"}
sentencepiece = {version = ">=0.1.99,<0.2.0"}
torch = {version = ">=2.4,<2.6", source = "pytorch-cpu"}

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[[tool.poetry.source]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
priority = "explicit"

[tool.poetry.group.funasr]
optional = true

[tool.poetry.group.funasr.dependencies]
funasr = {version = ">=1.1.0,<2.0.0"}
modelscope = {version = ">=1.21.0,<2.0.0"}
torch = {version = ">=2.4,<2.6", source = "pytorch-cpu", markers = "platform_system == 'Windows'"}

[tool.poetry.group.dev.dependencies]
ruff = "^0.11.11"
mypy = "^1.15.0"
pre-commit = "^4.2.0"
pyinstaller = "^6.13.0"
# Development and debugging tools
pytest = "^8.0.0"
pytest-cov = "^6.0.0"
pytest-asyncio = "^0.25.0"
pytest-mock = "^3.14.0"
# Performance profiling
py-spy = "^0.3.14"
memory-profiler = "^0.61.0"
line-profiler = "^4.1.1"
viztracer = "^0.16.1"
pyinstrument = "^5.0.0"
# Jupyter and data analysis
jupyterlab = "^4.3.0"
ipython = "^8.29.0"
notebook = "^7.3.0"
matplotlib = "^3.9.2"
seaborn = "^0.13.2"
plotly = "^5.24.1"
# Model development and analysis
netron = "^7.0.0"
tensorboard = "^2.18.0"
# Windows-specific development
pywin32 = "^308"
wmi = "^1.5.1"
psutil = "^6.1.0"
# API testing
httpx = "^0.28.0"
websockets = "^14.1"
# Documentation
sphinx = "^8.1.0"
sphinx-rtd-theme = "^3.0.0"

[tool.ruff]
line-length = 88
target-version = "py311"

exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",  # Pycodestyle errors
    "W",  # Pycodestyle warnings
    "F",  # Pyflakes
    "I",  # isort (import sorting)
    "B",  # flake8-bugbear (potential bugs and design problems)
    "C4", # flake8-comprehensions (more idiomatic comprehensions)
    "A",  # flake8-builtins (shadowing builtins)
    "SIM",# flake8-simplify
]

[tool.ruff.format]
quote-style = "double"
skip-magic-trailing-comma = true

[tool.pyright] # basedpyright typically respects the pyright configuration section
venvPath = "."   # Path to the directory *containing* the venv directory
venv = ".venv"   # Name of the virtual environment directory
